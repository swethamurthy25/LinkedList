Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9

____________________________________________________________________

# BRUTE FORCE METHOD-- Using Build in function
1. Initialize the empty list (array)
2. Initialize the current node and point it to head
3. While the currNode is not null: traverse through the linked list and append all the values to list
4. Then reverse the list using build-in function and return the list

# TC is O(n) and SC is O(n)

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        
        # Use buildin function - TC is O(N) and SC is O(N)
        list = []
        currNode = head
        while currNode != None:
            list.append(currNode.val)
            currNode = currNode.next
            
        return list[::-1]
 
        
